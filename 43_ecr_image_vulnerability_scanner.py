import boto3
import json
import os
from datetime import datetime

def lambda_handler(event, context):
    """
    AWS Lambda function to manage ECR image vulnerability scanning.
    
    This function can:
    - Be triggered by ECR image push events.
    - Initiate vulnerability scans for new images.
    - Check scan results and report on vulnerabilities found.
    - Notify on critical/high vulnerabilities.
    
    Environment Variables:
    - REGION: AWS region to operate in (default: us-east-1)
    - REPOSITORY_NAME: Specific ECR repository to process (if triggered by event, this might be in event data)
    - IMAGE_TAG: Specific image tag to process (if triggered by event)
    - IMAGE_DIGEST: Specific image digest to process (if triggered by event)
    - MINIMUM_SEVERITY_ALERT: Minimum severity to trigger an alert (e.g., HIGH, CRITICAL, default: HIGH)
    - SNS_TOPIC_ARN: Optional SNS topic ARN for vulnerability notifications
    """
    # Get configuration from environment variables
    region = os.environ.get('REGION', 'us-east-1')
    sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
    min_severity_alert = os.environ.get('MINIMUM_SEVERITY_ALERT', 'HIGH').upper()
    
    # Initialize AWS clients
    ecr_client = boto3.client('ecr', region_name=region)
    sns = boto3.client('sns', region_name=region) if sns_topic_arn else None

    scan_results_summary = {
        'timestamp': datetime.now().isoformat(),
        'images_scanned': [],
        'vulnerabilities_found': [],
        'errors': []
    }

    # Extract image details from event (example for ECR Image Scan event or manual trigger)
    # For an ECR Image Action event (push):
    # event['detail']['repository-name']
    # event['detail']['image-tag']
    # event['detail']['image-digest']
    
    repository_name = event.get('repository-name', os.environ.get('REPOSITORY_NAME'))
    image_tag = event.get('image-tag', os.environ.get('IMAGE_TAG'))
    image_digest = event.get('image-digest', os.environ.get('IMAGE_DIGEST'))

    if not repository_name or not (image_tag or image_digest):
        scan_results_summary['errors'].append("Missing repository_name or (image_tag/image_digest) in event or environment variables.")
        return {
            'statusCode': 400,
            'body': json.dumps(scan_results_summary)
        }

    image_identifier = {'imageTag': image_tag} if image_tag else {'imageDigest': image_digest}
    image_id_str = f"{repository_name}:{image_tag if image_tag else image_digest}"

    try:
        # Check if scan on push is enabled, or initiate scan if needed
        # For this example, we assume scan on push is enabled or we are reacting to a scan completion event.
        # If reacting to an ECR Image Scan event: event['detail']['scan-status'] == 'COMPLETE'
        
        # Describe image scan findings
        paginator = ecr_client.get_paginator('describe_image_scan_findings')
        response_iterator = paginator.paginate(
            repositoryName=repository_name,
            imageId=image_identifier,
            maxResults=1000 # Adjust as needed
        )
        
        current_image_vulnerabilities = []
        for page in response_iterator:
            if page.get('imageScanStatus', {}).get('status') == 'FAILED':
                scan_results_summary['errors'].append(f"Scan failed for {image_id_str}: {page['imageScanStatus'].get('description')}")
                break
            
            if page.get('imageScanStatus', {}).get('status') != 'COMPLETE':
                 scan_results_summary['errors'].append(f"Scan not yet complete for {image_id_str}. Status: {page.get('imageScanStatus', {}).get('status')}")
                 # In a real workflow, you might retry later or wait.
                 break

            findings = page.get('imageScanFindings', {}).get('findings', [])
            for finding in findings:
                severity = finding.get('severity')
                if severity in ['CRITICAL', 'HIGH'] or \
                   (min_severity_alert == 'MEDIUM' and severity == 'MEDIUM') or \
                   (min_severity_alert == 'LOW' and severity in ['LOW', 'INFORMATIONAL', 'UNDEFINED']):
                    current_image_vulnerabilities.append({
                        'name': finding.get('name'),
                        'severity': severity,
                        'uri': finding.get('uri'),
                        'description': finding.get('description', '')[:200] # Keep it brief
                    })
        
        scan_results_summary['images_scanned'].append({
            'image': image_id_str,
            'scan_status': page.get('imageScanStatus', {}).get('status', 'UNKNOWN'),
            'finding_counts': page.get('imageScanFindings', {}).get('findingSeverityCounts', {}),
            'vulnerabilities_reported_count': len(current_image_vulnerabilities)
        })
        
        if current_image_vulnerabilities:
            scan_results_summary['vulnerabilities_found'].extend(current_image_vulnerabilities)
            if sns:
                message = f"ECR Image Vulnerabilities Found for {image_id_str}:\n"
                for vuln in current_image_vulnerabilities:
                    message += f"- Name: {vuln['name']}, Severity: {vuln['severity']}, URI: {vuln['uri']}\n"
                sns.publish(TopicArn=sns_topic_arn, Message=message, Subject=f"ECR Vulnerability Alert: {image_id_str}")

    except Exception as e:
        error_message = f"Error processing ECR image {image_id_str}: {str(e)}"
        scan_results_summary['errors'].append(error_message)
        if sns:
            sns.publish(TopicArn=sns_topic_arn, Message=error_message, Subject="ECR Image Scanner Error")
        
        return {
            'statusCode': 500,
            'body': json.dumps(scan_results_summary)
        }

    return {
        'statusCode': 200,
        'body': json.dumps(scan_results_summary)
    }

if __name__ == '__main__':
    # Example usage for local testing (set environment variables or mock event)
    # os.environ['REPOSITORY_NAME'] = 'my-repo'
    # os.environ['IMAGE_TAG'] = 'latest'
    # os.environ['SNS_TOPIC_ARN'] = 'arn:aws:sns:us-east-1:123456789012:MySNSTopic'
    # Example event for ECR Image Scan completion:
    example_event = {
        "repository-name": "my-test-repo", # Replace with a repo you have access to
        "image-tag": "latest" # Replace with a tag that exists and has been scanned
        # "detail": {
        #     "scan-status": "COMPLETE",
        #     "repository-name": "your-repo-name",
        #     "image-digest": "sha256:abcdef...",
        #     "image-tags": ["latest", "v1.0"]
        # }
    }
    print(lambda_handler(example_event, {}))